rules_version = '2';
service cloud.firestore {

  // ユーザー認証
  function isAuthUser(auth, userId) {
    return auth != null && auth.uid == userId
  }

  // スキーマ検証
  function isValidUserSchema(user) {
    return user.size() == 7 // ドキュメントが7つのプロパティを持っている
      && 'name' in user && (user.name is string || user.name == null)
      && 'gender' in user && (user.gender is string || user.gender == null)
      && 'height' in user && (user.height is number || user.height == null)
      && 'weight' in user && (user.weight is number || user.weight == null)
      && 'doctor' in user && (user.doctor is string || user.doctor == null)
      && 'createdAt' in user && (user.createdAt is string || user.createdAt == null)
      && 'health' in user && user.health is list
  }

  // 値のバリデーション
  function isValidUserData(user) {
    return (user.name.size() <= 30 || user.name == null)
      && (user.gender.matches('男性|女性') || user.gender == null)
      && ((50 <= user.height && user.height <= 300) || user.height == null)
      && ((10 <= user.weight && user.weight <= 300) || user.weight == null)
      && (user.doctor.size() <= 30 || user.doctor == null)
      && (user.createdAt.size() <= 50 || user.createdAt == null)
  }

  match /databases/{database}/documents {
    match /users/{userId} {
      allow create: if isAuthUser(request.auth, userId) && isValidUserSchema(request.resource.data) && isValidUserData(request.resource.data);
      allow read:  if isAuthUser(request.auth, userId);
      allow update: if isAuthUser(request.auth, userId) && isValidUserSchema(request.resource.data) && isValidUserData(request.resource.data);
      allow delete: if isAuthUser(request.auth, userId);
    }
  }
}
